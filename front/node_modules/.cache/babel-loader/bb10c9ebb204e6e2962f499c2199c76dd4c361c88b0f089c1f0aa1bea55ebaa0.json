{"ast":null,"code":"var _jsxFileName = \"/Users/fabienduval/WebstormProjects/studi-exam-frontend-react/src/subComponents/AuthButton.js\",\n  _s = $RefreshSig$();\n// AuthButton.js\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userReducer } from '../redux/loginSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthButton() {\n  _s();\n  const dispatch = useDispatch();\n  let isLogged = useSelector(state => state.isLogged);\n  let buttonStyle = {\n    backgroundColor: isLogged === true ? 'green' : 'red',\n    color: 'white',\n    border: 'none',\n    padding: '10px 20px',\n    cursor: 'pointer'\n  };\n  function changeLogged() {\n    if (isLogged === true) {\n      isLogged = false;\n    } else {\n      isLogged = true;\n    }\n    console.log(isLogged);\n    dispatch(userReducer()); // This will always log the previous value of isLogged\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: buttonStyle,\n    onClick: changeLogged,\n    children: isLogged\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthButton, \"Gt2LYxqnFdDNgqmctxl9FLLNkS0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = AuthButton;\nexport default AuthButton;\nvar _c;\n$RefreshReg$(_c, \"AuthButton\");","map":{"version":3,"names":["React","useDispatch","useSelector","userReducer","jsxDEV","_jsxDEV","AuthButton","_s","dispatch","isLogged","state","buttonStyle","backgroundColor","color","border","padding","cursor","changeLogged","console","log","style","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fabienduval/WebstormProjects/studi-exam-frontend-react/src/subComponents/AuthButton.js"],"sourcesContent":["// AuthButton.js\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {userReducer} from '../redux/loginSlice';\n\nfunction AuthButton() {\n    const dispatch = useDispatch();\n    let isLogged = useSelector(state => state.isLogged);\n    let buttonStyle =   {\n        backgroundColor: isLogged === true ? 'green' : 'red',\n        color: 'white',\n        border: 'none',\n        padding: '10px 20px',\n        cursor: 'pointer',\n    };\n\n    function changeLogged() {\n        if (isLogged === true) {\n           isLogged = false;\n        } else {\n            isLogged = true;\n        }\n        console.log(isLogged);\n        dispatch(userReducer()); // This will always log the previous value of isLogged\n    }\n\n    return (\n        <button style={buttonStyle} onClick={changeLogged}>\n            {isLogged}\n        </button>\n    );\n}\n\nexport default AuthButton;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAAQC,WAAW,QAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,IAAIQ,QAAQ,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,QAAQ,CAAC;EACnD,IAAIE,WAAW,GAAK;IAChBC,eAAe,EAAEH,QAAQ,KAAK,IAAI,GAAG,OAAO,GAAG,KAAK;IACpDI,KAAK,EAAE,OAAO;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE,WAAW;IACpBC,MAAM,EAAE;EACZ,CAAC;EAED,SAASC,YAAYA,CAAA,EAAG;IACpB,IAAIR,QAAQ,KAAK,IAAI,EAAE;MACpBA,QAAQ,GAAG,KAAK;IACnB,CAAC,MAAM;MACHA,QAAQ,GAAG,IAAI;IACnB;IACAS,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;IACrBD,QAAQ,CAACL,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7B;EAEA,oBACIE,OAAA;IAAQe,KAAK,EAAET,WAAY;IAACU,OAAO,EAAEJ,YAAa;IAAAK,QAAA,EAC7Cb;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEjB;AAACnB,EAAA,CA1BQD,UAAU;EAAA,QACEL,WAAW,EACbC,WAAW;AAAA;AAAAyB,EAAA,GAFrBrB,UAAU;AA4BnB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}