{"ast":null,"code":"var _jsxFileName = \"/Users/fabienduval/WebstormProjects/studi-exam-frontend-react/src/subComponents/LanguageButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setLanguage, getNextLanguage } from '../redux/languageSlice';\nimport { ENGLISH, FRENCH, SPANISH } from '../redux/languageSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyComponent() {\n  _s();\n  const dispatch = useDispatch();\n  const language = useSelector(state => state.languageSlice.language);\n  const [languageText, setLanguageText] = useState('English');\n  const switchLanguage = () => {\n    const nextLanguage = getNextLanguage(language);\n    dispatch(setLanguage(nextLanguage));\n  };\n  useEffect(() => {\n    if (language === ENGLISH) {\n      setLanguageText('English');\n    } else if (language === FRENCH) {\n      setLanguageText('Fançais');\n    } else {\n      setLanguageText('Español');\n    }\n  }, [language]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: switchLanguage,\n    children: languageText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(MyComponent, \"GmbuyOBNtyIhev1uTrCUbi5DEk4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = MyComponent;\nexport default MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","setLanguage","getNextLanguage","ENGLISH","FRENCH","SPANISH","jsxDEV","_jsxDEV","MyComponent","_s","dispatch","language","state","languageSlice","languageText","setLanguageText","switchLanguage","nextLanguage","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fabienduval/WebstormProjects/studi-exam-frontend-react/src/subComponents/LanguageButton.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {setLanguage, getNextLanguage} from '../redux/languageSlice';\nimport {ENGLISH, FRENCH, SPANISH} from '../redux/languageSlice';\n\nfunction MyComponent() {\n    const dispatch = useDispatch();\n    const language = useSelector(state => state.languageSlice.language);\n    const [languageText, setLanguageText] = useState('English');\n\n    const switchLanguage = () => {\n        const nextLanguage = getNextLanguage(language);\n        dispatch(setLanguage(nextLanguage));\n    }\n\n    useEffect(() => {\n        if (language === ENGLISH) {\n            setLanguageText('English');\n        } else if (language === FRENCH) {\n            setLanguageText('Fançais');\n        } else {\n            setLanguageText('Español');\n        }\n    }, [language]);\n\n    return (\n        <button onClick={switchLanguage}>\n            {languageText}\n        </button>\n    );\n}\n\nexport default MyComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAAQC,WAAW,EAAEC,eAAe,QAAO,wBAAwB;AACnE,SAAQC,OAAO,EAAEC,MAAM,EAAEC,OAAO,QAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,QAAQ,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,aAAa,CAACF,QAAQ,CAAC;EACnE,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,SAAS,CAAC;EAE3D,MAAMmB,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,YAAY,GAAGf,eAAe,CAACS,QAAQ,CAAC;IAC9CD,QAAQ,CAACT,WAAW,CAACgB,YAAY,CAAC,CAAC;EACvC,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACZ,IAAIa,QAAQ,KAAKR,OAAO,EAAE;MACtBY,eAAe,CAAC,SAAS,CAAC;IAC9B,CAAC,MAAM,IAAIJ,QAAQ,KAAKP,MAAM,EAAE;MAC5BW,eAAe,CAAC,SAAS,CAAC;IAC9B,CAAC,MAAM;MACHA,eAAe,CAAC,SAAS,CAAC;IAC9B;EACJ,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,oBACIJ,OAAA;IAAQW,OAAO,EAAEF,cAAe;IAAAG,QAAA,EAC3BL;EAAY;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEjB;AAACd,EAAA,CAzBQD,WAAW;EAAA,QACCT,WAAW,EACXC,WAAW;AAAA;AAAAwB,EAAA,GAFvBhB,WAAW;AA2BpB,eAAeA,WAAW;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}